@mixin chewing-grid__atomic-col(
  $cell-min-size-map: generate-size-map(1, 20, 50px),
  $cell-min-modifier: 'card-min-', 
  $col-start-size: 1,
  $col-end-size: 12,
  $col-has-auto: true,
  $col-modifier: 'col-', 
  $prefix: $chewing-grid__prefix
) {
  
  @if ($col-has-auto) {
    .#{$prefix}row--#{$col-modifier}auto > .#{$prefix}cell {
      @include chewing-grid__cell--column();
    }
  }

  @for $col-size from $col-start-size through $col-end-size {
    .#{$prefix}row--#{$col-modifier}#{$col-size} > .#{$prefix}cell {
      @include chewing-grid__cell--column($col-size);
    }
  }
  
  @each $name, $min in $cell-min-size-map {
    .#{$prefix}row--#{$cell-min-modifier}#{$name} > .#{$prefix}cell {
      min-width: $min;
    }

    @for $screen-size from ($col-end-size - 1) through $col-start-size {
      @media (max-width: #{($screen-size + 1) * $min - 1}) {
        /* Responsive inline-block fallback */
        /* Screen support only #{$screen-size} columns */
        $selectorList: ();
        @for $col-size from ($screen-size + 1) through $col-end-size {
          $selector: unquote('.#{$prefix}row--#{$col-modifier}#{$col-size}.#{$prefix}row--#{$cell-min-modifier}#{$name} > .#{$prefix}cell');
          $selectorList: append($selectorList, $selector);
        }
        @if ($screen-size == 1) {
          $selector: unquote('.#{$prefix}row--#{$cell-min-modifier}#{$name} > .#{$prefix}cell');
          $selectorList: append($selectorList, $selector);
        }
        #{zip($selectorList)} {
          width: 100% / $screen-size;
          @if ($screen-size == 1) {
            /* 1 column fix: Reset the min-width */
            display: block;
            min-width: 0;
          }
        }
      }
    }
  }
}